// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 effective-4.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -module-name DifferenceKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public protocol ContentEquatable {
  func isContentEqual(to source: Self) -> Swift.Bool
}
extension DifferenceKit.ContentEquatable where Self : Swift.Equatable {
  @inlinable public func isContentEqual(to source: Self) -> Swift.Bool {
        return self == source
    }
}
extension Swift.Optional : DifferenceKit.ContentEquatable where Wrapped : DifferenceKit.ContentEquatable {
  @inlinable public func isContentEqual(to source: Wrapped?) -> Swift.Bool {
        switch (self, source) {
        case let (lhs?, rhs?):
            return lhs.isContentEqual(to: rhs)

        case (.none, .none):
            return true

        case (.none, .some), (.some, .none):
            return false
        }
    }
}
extension Swift.Array : DifferenceKit.ContentEquatable where Element : DifferenceKit.ContentEquatable {
  @inlinable public func isContentEqual(to source: [Element]) -> Swift.Bool {
        return count == source.count
            && zip(self, source).allSatisfy { $0.isContentEqual(to: $1) }
    }
}
public struct Changeset<Collection> where Collection : Swift.Collection {
  public var data: Collection
  public var sectionDeleted: [Swift.Int]
  public var sectionInserted: [Swift.Int]
  public var sectionUpdated: [Swift.Int]
  public var sectionMoved: [(source: Swift.Int, target: Swift.Int)]
  public var elementDeleted: [DifferenceKit.ElementPath]
  public var elementInserted: [DifferenceKit.ElementPath]
  public var elementUpdated: [DifferenceKit.ElementPath]
  public var elementMoved: [(source: DifferenceKit.ElementPath, target: DifferenceKit.ElementPath)]
  public init(data: Collection, sectionDeleted: [Swift.Int] = [], sectionInserted: [Swift.Int] = [], sectionUpdated: [Swift.Int] = [], sectionMoved: [(source: Swift.Int, target: Swift.Int)] = [], elementDeleted: [DifferenceKit.ElementPath] = [], elementInserted: [DifferenceKit.ElementPath] = [], elementUpdated: [DifferenceKit.ElementPath] = [], elementMoved: [(source: DifferenceKit.ElementPath, target: DifferenceKit.ElementPath)] = [])
}
extension DifferenceKit.Changeset {
  @inlinable public var sectionChangeCount: Swift.Int {
    get {
        return sectionDeleted.count
            + sectionInserted.count
            + sectionUpdated.count
            + sectionMoved.count
    }
  }
  @inlinable public var elementChangeCount: Swift.Int {
    get {
        return elementDeleted.count
            + elementInserted.count
            + elementUpdated.count
            + elementMoved.count
    }
  }
  @inlinable public var changeCount: Swift.Int {
    get {
        return sectionChangeCount + elementChangeCount
    }
  }
  @inlinable public var hasSectionChanges: Swift.Bool {
    get {
        return sectionChangeCount > 0
    }
  }
  @inlinable public var hasElementChanges: Swift.Bool {
    get {
        return elementChangeCount > 0
    }
  }
  @inlinable public var hasChanges: Swift.Bool {
    get {
        return changeCount > 0
    }
  }
}
extension DifferenceKit.Changeset : Swift.Equatable where Collection : Swift.Equatable {
  public static func == (lhs: DifferenceKit.Changeset<Collection>, rhs: DifferenceKit.Changeset<Collection>) -> Swift.Bool
}
extension DifferenceKit.Changeset : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public struct AnyDifferentiable : DifferenceKit.Differentiable {
  @inlinable public var base: Any {
    get {
        return box.base
    }
  }
  @inlinable public var differenceIdentifier: Swift.AnyHashable {
    get {
        return box.differenceIdentifier
    }
  }
  @usableFromInline
  internal let box: DifferenceKit.AnyDifferentiableBox
  public init<D>(_ base: D) where D : DifferenceKit.ContentEquatable, D : DifferenceKit.ContentIdentifiable
  @inlinable public func isContentEqual(to source: DifferenceKit.AnyDifferentiable) -> Swift.Bool {
        return box.isContentEqual(to: source.box)
    }
  public typealias DifferenceIdentifier = Swift.AnyHashable
}
extension DifferenceKit.AnyDifferentiable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@usableFromInline
internal protocol AnyDifferentiableBox {
  var base: Any { get }
  var differenceIdentifier: Swift.AnyHashable { get }
  func isContentEqual(to source: DifferenceKit.AnyDifferentiableBox) -> Swift.Bool
}
@usableFromInline
internal struct DifferentiableBox<Base> : DifferenceKit.AnyDifferentiableBox where Base : DifferenceKit.ContentEquatable, Base : DifferenceKit.ContentIdentifiable {
  @usableFromInline
  internal let baseComponent: Base
  @inlinable internal var base: Any {
    get {
        return baseComponent
    }
  }
  @inlinable internal var differenceIdentifier: Swift.AnyHashable {
    get {
        return baseComponent.differenceIdentifier
    }
  }
  @usableFromInline
  internal init(_ base: Base)
  @inlinable internal func isContentEqual(to source: DifferenceKit.AnyDifferentiableBox) -> Swift.Bool {
        guard let sourceBase = source.base as? Base else {
            return false
        }
        return baseComponent.isContentEqual(to: sourceBase)
    }
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) public func reload<C>(using stagedChangeset: DifferenceKit.StagedChangeset<C>, with animation: @autoclosure () -> UIKit.UITableView.RowAnimation, interrupt: ((DifferenceKit.Changeset<C>) -> Swift.Bool)? = nil, setData: (C) -> Swift.Void) where C : Swift.Collection
  @_Concurrency.MainActor(unsafe) public func reload<C>(using stagedChangeset: DifferenceKit.StagedChangeset<C>, deleteSectionsAnimation: @autoclosure () -> UIKit.UITableView.RowAnimation, insertSectionsAnimation: @autoclosure () -> UIKit.UITableView.RowAnimation, reloadSectionsAnimation: @autoclosure () -> UIKit.UITableView.RowAnimation, deleteRowsAnimation: @autoclosure () -> UIKit.UITableView.RowAnimation, insertRowsAnimation: @autoclosure () -> UIKit.UITableView.RowAnimation, reloadRowsAnimation: @autoclosure () -> UIKit.UITableView.RowAnimation, interrupt: ((DifferenceKit.Changeset<C>) -> Swift.Bool)? = nil, setData: (C) -> Swift.Void) where C : Swift.Collection
}
extension UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) public func reload<C>(using stagedChangeset: DifferenceKit.StagedChangeset<C>, interrupt: ((DifferenceKit.Changeset<C>) -> Swift.Bool)? = nil, setData: (C) -> Swift.Void) where C : Swift.Collection
}
extension DifferenceKit.StagedChangeset where Collection : Swift.RangeReplaceableCollection, Collection.Element : DifferenceKit.ContentEquatable, Collection.Element : DifferenceKit.ContentIdentifiable {
  @inlinable public init(source: Collection, target: Collection) {
        self.init(source: source, target: target, section: 0)
    }
  @inlinable public init(source: Collection, target: Collection, section: Swift.Int) {
        let sourceElements = ContiguousArray(source)
        let targetElements = ContiguousArray(target)

        // Return empty changesets if both are empty.
        if sourceElements.isEmpty && targetElements.isEmpty {
            self.init()
            return
        }

        // Return changesets that all deletions if source is not empty and target is empty.
        if !sourceElements.isEmpty && targetElements.isEmpty {
            self.init([Changeset(data: target, elementDeleted: sourceElements.indices.map { ElementPath(element: $0, section: section) })])
            return
        }

        // Return changesets that all insertions if source is empty and target is not empty.
        if sourceElements.isEmpty && !targetElements.isEmpty {
            self.init([Changeset(data: target, elementInserted: targetElements.indices.map { ElementPath(element: $0, section: section) })])
            return
        }

        var firstStageElements = ContiguousArray<Collection.Element>()
        var secondStageElements = ContiguousArray<Collection.Element>()

        let result = diff(
            source: sourceElements,
            target: targetElements,
            useTargetIndexForUpdated: false,
            mapIndex: { ElementPath(element: $0, section: section) },
            updatedElementsPointer: &firstStageElements,
            notDeletedElementsPointer: &secondStageElements
        )

        var changesets = ContiguousArray<Changeset<Collection>>()

        // The 1st stage changeset.
        // - Includes:
        //   - element updates
        if !result.updated.isEmpty {
            changesets.append(
                Changeset(
                    data: Collection(firstStageElements),
                    elementUpdated: result.updated
                )
            )
        }

        // The 2nd stage changeset.
        // - Includes:
        //   - element deletes
        if !result.deleted.isEmpty {
            changesets.append(
                Changeset(
                    data: Collection(secondStageElements),
                    elementDeleted: result.deleted
                )
            )
        }

        // The 3rd stage changeset.
        // - Includes:
        //   - element inserts
        //   - element moves
        if !result.inserted.isEmpty || !result.moved.isEmpty {
            changesets.append(
                Changeset(
                    data: target,
                    elementInserted: result.inserted,
                    elementMoved: result.moved
                )
            )
        }

        // Set the target to `data` of the last stage.
        if !changesets.isEmpty {
            let index = changesets.index(before: changesets.endIndex)
            changesets[index].data = target
        }

        self.init(changesets)
    }
}
extension DifferenceKit.StagedChangeset where Collection : Swift.RangeReplaceableCollection, Collection.Element : DifferenceKit.DifferentiableSection {
  @inlinable public init(source: Collection, target: Collection) {
        typealias Section = Collection.Element
        typealias SectionIdentifier = Collection.Element.DifferenceIdentifier
        typealias Element = Collection.Element.Collection.Element
        typealias ElementIdentifier = Collection.Element.Collection.Element.DifferenceIdentifier

        let sourceSections = ContiguousArray(source)
        let targetSections = ContiguousArray(target)

        let contiguousSourceSections = ContiguousArray(sourceSections.map { ContiguousArray($0.elements) })
        let contiguousTargetSections = ContiguousArray(targetSections.map { ContiguousArray($0.elements) })

        var firstStageSections = sourceSections
        var secondStageSections = ContiguousArray<Section>()
        var thirdStageSections = ContiguousArray<Section>()
        var fourthStageSections = ContiguousArray<Section>()

        var sourceElementTraces = contiguousSourceSections.map { section in
            ContiguousArray(repeating: Trace<ElementPath>(), count: section.count)
        }
        var targetElementReferences = contiguousTargetSections.map { section in
            ContiguousArray<ElementPath?>(repeating: nil, count: section.count)
        }

        let flattenSourceCount = contiguousSourceSections.reduce(into: 0) { $0 += $1.count }
        var flattenSourceIdentifiers = ContiguousArray<ElementIdentifier>()
        var flattenSourceElementPaths = ContiguousArray<ElementPath>()

        thirdStageSections.reserveCapacity(contiguousTargetSections.count)
        fourthStageSections.reserveCapacity(contiguousTargetSections.count)

        flattenSourceIdentifiers.reserveCapacity(flattenSourceCount)
        flattenSourceElementPaths.reserveCapacity(flattenSourceCount)

        // Calculate section differences.

        let sectionResult = diff(
            source: sourceSections,
            target: targetSections,
            useTargetIndexForUpdated: true,
            mapIndex: { $0 }
        )

        // Calculate element differences.

        var elementDeleted = [ElementPath]()
        var elementInserted = [ElementPath]()
        var elementUpdated = [ElementPath]()
        var elementMoved = [(source: ElementPath, target: ElementPath)]()

        for sourceSectionIndex in contiguousSourceSections.indices {
            for sourceElementIndex in contiguousSourceSections[sourceSectionIndex].indices {
                let sourceElementPath = ElementPath(element: sourceElementIndex, section: sourceSectionIndex)
                let sourceElement = contiguousSourceSections[sourceElementPath]
                flattenSourceIdentifiers.append(sourceElement.differenceIdentifier)
                flattenSourceElementPaths.append(sourceElementPath)
            }
        }

        flattenSourceIdentifiers.withUnsafeBufferPointer { bufferPointer in
            // The pointer and the table key are for optimization.
            var sourceOccurrencesTable = [TableKey<ElementIdentifier>: Occurrence](minimumCapacity: flattenSourceCount)

            // Track indices of elements found in flatten source collection into occurrences table.
            for flattenSourceIndex in flattenSourceIdentifiers.indices {
                let pointer = bufferPointer.baseAddress!.advanced(by: flattenSourceIndex)
                let key = TableKey(pointer: pointer)

                switch sourceOccurrencesTable[key] {
                case .none:
                    sourceOccurrencesTable[key] = .unique(index: flattenSourceIndex)

                case .unique(let otherIndex)?:
                    let reference = IndicesReference([otherIndex, flattenSourceIndex])
                    sourceOccurrencesTable[key] = .duplicate(reference: reference)

                case .duplicate(let reference)?:
                    reference.push(flattenSourceIndex)
                }
            }

            // Track target and source indices of the elements having same identifier.
            for targetSectionIndex in contiguousTargetSections.indices {
                let targetElements = contiguousTargetSections[targetSectionIndex]

                for targetElementIndex in targetElements.indices {
                    var targetIdentifier = targetElements[targetElementIndex].differenceIdentifier
                    let key = TableKey(pointer: &targetIdentifier)

                    switch sourceOccurrencesTable[key] {
                    case .none:
                        break

                    case .unique(let flattenSourceIndex)?:
                        let sourceElementPath = flattenSourceElementPaths[flattenSourceIndex]
                        let targetElementPath = ElementPath(element: targetElementIndex, section: targetSectionIndex)

                        if case .none = sourceElementTraces[sourceElementPath].reference {
                            targetElementReferences[targetElementPath] = sourceElementPath
                            sourceElementTraces[sourceElementPath].reference = targetElementPath
                        }

                    case .duplicate(let reference)?:
                        if let flattenSourceIndex = reference.next() {
                            let sourceElementPath = flattenSourceElementPaths[flattenSourceIndex]
                            let targetElementPath = ElementPath(element: targetElementIndex, section: targetSectionIndex)
                            targetElementReferences[targetElementPath] = sourceElementPath
                            sourceElementTraces[sourceElementPath].reference = targetElementPath
                        }
                    }
                }
            }
        }

        // Track element deletes.
        for sourceSectionIndex in contiguousSourceSections.indices {
            let sourceSection = sourceSections[sourceSectionIndex]
            let sourceElements = contiguousSourceSections[sourceSectionIndex]
            var firstStageElements = sourceElements

            // Should not track element deletes in the deleted section.
            if case .some = sectionResult.sourceTraces[sourceSectionIndex].reference {
                var offsetByDelete = 0

                var secondStageElements = ContiguousArray<Element>()

                for sourceElementIndex in sourceElements.indices {
                    let sourceElementPath = ElementPath(element: sourceElementIndex, section: sourceSectionIndex)

                    sourceElementTraces[sourceElementPath].deleteOffset = offsetByDelete

                    // Track element deletes if target section is tracked as inserts.
                    if let targetElementPath = sourceElementTraces[sourceElementPath].reference,
                        case .some = sectionResult.targetReferences[targetElementPath.section] {
                        let targetElement = contiguousTargetSections[targetElementPath]
                        firstStageElements[sourceElementIndex] = targetElement
                        secondStageElements.append(targetElement)
                        continue
                    }

                    elementDeleted.append(sourceElementPath)
                    sourceElementTraces[sourceElementPath].isTracked = true
                    offsetByDelete += 1
                }

                let secondStageSection = Section(source: sourceSection, elements: secondStageElements)
                secondStageSections.append(secondStageSection)

            }

            let firstStageSection = Section(source: sourceSection, elements: firstStageElements)
            firstStageSections[sourceSectionIndex] = firstStageSection
        }

        // Track element updates / moves / inserts.
        for targetSectionIndex in contiguousTargetSections.indices {
            // Should not track element updates / moves / inserts in the inserted section.
            guard let sourceSectionIndex = sectionResult.targetReferences[targetSectionIndex] else {
                thirdStageSections.append(targetSections[targetSectionIndex])
                fourthStageSections.append(targetSections[targetSectionIndex])
                continue
            }

            var untrackedSourceIndex: Int? = 0
            let targetElements = contiguousTargetSections[targetSectionIndex]

            let sectionDeleteOffset = sectionResult.sourceTraces[sourceSectionIndex].deleteOffset

            let thirdStageSection = secondStageSections[sourceSectionIndex - sectionDeleteOffset]
            thirdStageSections.append(thirdStageSection)

            var fourthStageElements = ContiguousArray<Element>()
            fourthStageElements.reserveCapacity(targetElements.count)

            for targetElementIndex in targetElements.indices {
                untrackedSourceIndex = untrackedSourceIndex.flatMap { index in
                    sourceElementTraces[sourceSectionIndex].suffix(from: index).firstIndex { !$0.isTracked }
                }

                let targetElementPath = ElementPath(element: targetElementIndex, section: targetSectionIndex)
                let targetElement = contiguousTargetSections[targetElementPath]

                // Track element inserts if source section is tracked as deletes.
                guard let sourceElementPath = targetElementReferences[targetElementPath],
                    let movedSourceSectionIndex = sectionResult.sourceTraces[sourceElementPath.section].reference else {
                        fourthStageElements.append(targetElement)
                        elementInserted.append(targetElementPath)
                        continue
                }

                sourceElementTraces[sourceElementPath].isTracked = true

                let sourceElement = contiguousSourceSections[sourceElementPath]
                fourthStageElements.append(targetElement)

                if !targetElement.isContentEqual(to: sourceElement) {
                    elementUpdated.append(sourceElementPath)
                }

                if sourceElementPath.section != sourceSectionIndex || sourceElementPath.element != untrackedSourceIndex {
                    let deleteOffset = sourceElementTraces[sourceElementPath].deleteOffset
                    let moveSourceElementPath = ElementPath(element: sourceElementPath.element - deleteOffset, section: movedSourceSectionIndex)
                    elementMoved.append((source: moveSourceElementPath, target: targetElementPath))
                }
            }

            let fourthStageSection = Section(source: thirdStageSection, elements: fourthStageElements)
            fourthStageSections.append(fourthStageSection)
        }

        var changesets = ContiguousArray<Changeset<Collection>>()

        // The 1st stage changeset.
        // - Includes:
        //   - element updates
        if !elementUpdated.isEmpty {
            changesets.append(
                Changeset(
                    data: Collection(firstStageSections),
                    elementUpdated: elementUpdated
                )
            )
        }

        // The 2nd stage changeset.
        // - Includes:
        //   - section deletes
        //   - element deletes
        if !sectionResult.deleted.isEmpty || !elementDeleted.isEmpty {
            changesets.append(
                Changeset(
                    data: Collection(secondStageSections),
                    sectionDeleted: sectionResult.deleted,
                    elementDeleted: elementDeleted
                )
            )
        }

        // The 3rd stage changeset.
        // - Includes:
        //   - section inserts
        //   - section moves
        if !sectionResult.inserted.isEmpty || !sectionResult.moved.isEmpty {
            changesets.append(
                Changeset(
                    data: Collection(thirdStageSections),
                    sectionInserted: sectionResult.inserted,
                    sectionMoved: sectionResult.moved
                )
            )
        }

        // The 4th stage changeset.
        // - Includes:
        //   - element inserts
        //   - element moves
        if !elementInserted.isEmpty || !elementMoved.isEmpty {
            changesets.append(
                Changeset(
                    data: Collection(fourthStageSections),
                    elementInserted: elementInserted,
                    elementMoved: elementMoved
                )
            )
        }

        // The 5th stage changeset.
        // - Includes:
        //   - section updates
        if !sectionResult.updated.isEmpty {
            changesets.append(
                Changeset(
                    data: target,
                    sectionUpdated: sectionResult.updated
                )
            )
        }

        // Set the target to `data` of the last stage.
        if !changesets.isEmpty {
            let index = changesets.index(before: changesets.endIndex)
            changesets[index].data = target
        }

        self.init(changesets)
    }
}
@discardableResult
@inlinable internal func diff<E, I>(source: Swift.ContiguousArray<E>, target: Swift.ContiguousArray<E>, useTargetIndexForUpdated: Swift.Bool, mapIndex: (Swift.Int) -> I, updatedElementsPointer: Swift.UnsafeMutablePointer<Swift.ContiguousArray<E>>? = nil, notDeletedElementsPointer: Swift.UnsafeMutablePointer<Swift.ContiguousArray<E>>? = nil) -> DifferenceKit.DiffResult<I> where E : DifferenceKit.ContentEquatable, E : DifferenceKit.ContentIdentifiable {
    var deleted = [I]()
    var inserted = [I]()
    var updated = [I]()
    var moved = [(source: I, target: I)]()

    var sourceTraces = ContiguousArray<Trace<Int>>()
    var sourceIdentifiers = ContiguousArray<E.DifferenceIdentifier>()
    var targetReferences = ContiguousArray<Int?>(repeating: nil, count: target.count)

    sourceTraces.reserveCapacity(source.count)
    sourceIdentifiers.reserveCapacity(source.count)

    for sourceElement in source {
        sourceTraces.append(Trace())
        sourceIdentifiers.append(sourceElement.differenceIdentifier)
    }

    sourceIdentifiers.withUnsafeBufferPointer { bufferPointer in
        // The pointer and the table key are for optimization.
        var sourceOccurrencesTable = [TableKey<E.DifferenceIdentifier>: Occurrence](minimumCapacity: source.count)

        // Track indices of elements found in source collection into occurrences table.
        for sourceIndex in sourceIdentifiers.indices {
            let pointer = bufferPointer.baseAddress!.advanced(by: sourceIndex)
            let key = TableKey(pointer: pointer)

            switch sourceOccurrencesTable[key] {
            case .none:
                sourceOccurrencesTable[key] = .unique(index: sourceIndex)

            case .unique(let otherIndex)?:
                let reference = IndicesReference([otherIndex, sourceIndex])
                sourceOccurrencesTable[key] = .duplicate(reference: reference)

            case .duplicate(let reference)?:
                reference.push(sourceIndex)
            }
        }

        // Track target and source indices of the elements having same identifier.
        for targetIndex in target.indices {
            var targetIdentifier = target[targetIndex].differenceIdentifier
            let key = TableKey(pointer: &targetIdentifier)

            switch sourceOccurrencesTable[key] {
            case .none:
                break

            case .unique(let sourceIndex)?:
                if case .none = sourceTraces[sourceIndex].reference {
                    targetReferences[targetIndex] = sourceIndex
                    sourceTraces[sourceIndex].reference = targetIndex
                }

            case .duplicate(let reference)?:
                if let sourceIndex = reference.next() {
                    targetReferences[targetIndex] = sourceIndex
                    sourceTraces[sourceIndex].reference = targetIndex
                }
            }
        }
    }

    var offsetByDelete = 0
    var untrackedSourceIndex: Int? = 0

    // Track deletes.
    for sourceIndex in source.indices {
        sourceTraces[sourceIndex].deleteOffset = offsetByDelete

        if let targetIndex = sourceTraces[sourceIndex].reference {
            let targetElement = target[targetIndex]
            updatedElementsPointer?.pointee.append(targetElement)
            notDeletedElementsPointer?.pointee.append(targetElement)
        }
        else {
            let sourceElement = source[sourceIndex]
            deleted.append(mapIndex(sourceIndex))
            sourceTraces[sourceIndex].isTracked = true
            offsetByDelete += 1
            updatedElementsPointer?.pointee.append(sourceElement)
        }
    }

    // Track updates / moves / inserts.
    for targetIndex in target.indices {
        untrackedSourceIndex = untrackedSourceIndex.flatMap { index in
            sourceTraces.suffix(from: index).firstIndex { !$0.isTracked }
        }

        if let sourceIndex = targetReferences[targetIndex] {
            sourceTraces[sourceIndex].isTracked = true

            let sourceElement = source[sourceIndex]
            let targetElement = target[targetIndex]

            if !targetElement.isContentEqual(to: sourceElement) {
                updated.append(mapIndex(useTargetIndexForUpdated ? targetIndex : sourceIndex))
            }

            if sourceIndex != untrackedSourceIndex {
                let deleteOffset = sourceTraces[sourceIndex].deleteOffset
                moved.append((source: mapIndex(sourceIndex - deleteOffset), target: mapIndex(targetIndex)))
            }
        }
        else {
            inserted.append(mapIndex(targetIndex))
        }
    }

    return DiffResult(
        deleted: deleted,
        inserted: inserted,
        updated: updated,
        moved: moved,
        sourceTraces: sourceTraces,
        targetReferences: targetReferences
    )
}
@usableFromInline
internal struct DiffResult<Index> {
  @usableFromInline
  internal let deleted: [Index]
  @usableFromInline
  internal let inserted: [Index]
  @usableFromInline
  internal let updated: [Index]
  @usableFromInline
  internal let moved: [(source: Index, target: Index)]
  @usableFromInline
  internal let sourceTraces: Swift.ContiguousArray<DifferenceKit.Trace<Swift.Int>>
  @usableFromInline
  internal let targetReferences: Swift.ContiguousArray<Swift.Int?>
  @usableFromInline
  internal init(deleted: [Index] = [], inserted: [Index] = [], updated: [Index] = [], moved: [(source: Index, target: Index)] = [], sourceTraces: Swift.ContiguousArray<DifferenceKit.Trace<Swift.Int>>, targetReferences: Swift.ContiguousArray<Swift.Int?>)
}
@usableFromInline
internal struct Trace<Index> {
  @usableFromInline
  internal var reference: Index?
  @usableFromInline
  internal var deleteOffset: Swift.Int
  @usableFromInline
  internal var isTracked: Swift.Bool
  @usableFromInline
  internal init()
}
@usableFromInline
internal enum Occurrence {
  case unique(index: Swift.Int)
  case duplicate(reference: DifferenceKit.IndicesReference)
}
@usableFromInline
final internal class IndicesReference {
  @usableFromInline
  final internal var indices: Swift.ContiguousArray<Swift.Int>
  @usableFromInline
  final internal var position: Swift.Int
  @usableFromInline
  internal init(_ indices: Swift.ContiguousArray<Swift.Int>)
  @inlinable final internal func push(_ index: Swift.Int) {
        indices.append(index)
    }
  @inlinable final internal func next() -> Swift.Int? {
        guard position < indices.endIndex else {
            return nil
        }
        defer { position += 1 }
        return indices[position]
    }
  @objc @usableFromInline
  deinit
}
@usableFromInline
internal struct TableKey<T> : Swift.Hashable where T : Swift.Hashable {
  @usableFromInline
  internal let pointeeHashValue: Swift.Int
  @usableFromInline
  internal let pointer: Swift.UnsafePointer<T>
  @usableFromInline
  internal init(pointer: Swift.UnsafePointer<T>)
  @inlinable internal static func == (lhs: DifferenceKit.TableKey<T>, rhs: DifferenceKit.TableKey<T>) -> Swift.Bool {
        return lhs.pointeeHashValue == rhs.pointeeHashValue
            && (lhs.pointer.distance(to: rhs.pointer) == 0 || lhs.pointer.pointee == rhs.pointer.pointee)
    }
  @inlinable internal func hash(into hasher: inout Swift.Hasher) {
        hasher.combine(pointeeHashValue)
    }
  @usableFromInline
  internal var hashValue: Swift.Int {
    @usableFromInline
    get
  }
}
extension Swift.MutableCollection where Self.Element : Swift.MutableCollection, Self.Index == Swift.Int, Self.Element.Index == Swift.Int {
  @inlinable internal subscript(path: DifferenceKit.ElementPath) -> Self.Element.Element {
    get { return self[path.section][path.element] }
    set { self[path.section][path.element] = newValue }
  }
}
public struct ElementPath : Swift.Hashable {
  public var element: Swift.Int
  public var section: Swift.Int
  public init(element: Swift.Int, section: Swift.Int)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: DifferenceKit.ElementPath, b: DifferenceKit.ElementPath) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension DifferenceKit.ElementPath : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public typealias Differentiable = DifferenceKit.ContentEquatable & DifferenceKit.ContentIdentifiable
public struct ArraySection<Model, Element> : DifferenceKit.DifferentiableSection where Model : DifferenceKit.ContentEquatable, Model : DifferenceKit.ContentIdentifiable, Element : DifferenceKit.ContentEquatable, Element : DifferenceKit.ContentIdentifiable {
  public var model: Model
  public var elements: [Element]
  @inlinable public var differenceIdentifier: Model.DifferenceIdentifier {
    get {
        return model.differenceIdentifier
    }
  }
  public init<C>(model: Model, elements: C) where Element == C.Element, C : Swift.Collection
  @inlinable public init<C>(source: DifferenceKit.ArraySection<Model, Element>, elements: C) where Element == C.Element, C : Swift.Collection {
        self.init(model: source.model, elements: elements)
    }
  @inlinable public func isContentEqual(to source: DifferenceKit.ArraySection<Model, Element>) -> Swift.Bool {
        return model.isContentEqual(to: source.model)
    }
  public typealias Collection = [Element]
  public typealias DifferenceIdentifier = Model.DifferenceIdentifier
}
extension DifferenceKit.ArraySection : Swift.Equatable where Model : Swift.Equatable, Element : Swift.Equatable {
  public static func == (lhs: DifferenceKit.ArraySection<Model, Element>, rhs: DifferenceKit.ArraySection<Model, Element>) -> Swift.Bool
}
extension DifferenceKit.ArraySection : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public struct StagedChangeset<Collection> where Collection : Swift.Collection {
  @usableFromInline
  internal var changesets: Swift.ContiguousArray<DifferenceKit.Changeset<Collection>>
  public init<C>(_ changesets: C) where C : Swift.Collection, C.Element == DifferenceKit.Changeset<Collection>
}
extension DifferenceKit.StagedChangeset : Swift.RandomAccessCollection, Swift.RangeReplaceableCollection, Swift.MutableCollection {
  public typealias Element = DifferenceKit.Changeset<Collection>
  @inlinable public init() {
        self.init([])
    }
  @inlinable public var startIndex: Swift.Int {
    get {
        return changesets.startIndex
    }
  }
  @inlinable public var endIndex: Swift.Int {
    get {
        return changesets.endIndex
    }
  }
  @inlinable public func index(after i: Swift.Int) -> Swift.Int {
        return changesets.index(after: i)
    }
  @inlinable public subscript(position: Swift.Int) -> DifferenceKit.Changeset<Collection> {
    get { return changesets[position] }
    set { changesets[position] = newValue }
  }
  @inlinable public mutating func replaceSubrange<C, R>(_ subrange: R, with newElements: C) where C : Swift.Collection, R : Swift.RangeExpression, C.Element == DifferenceKit.Changeset<Collection>, R.Bound == Swift.Int {
        changesets.replaceSubrange(subrange, with: newElements)
    }
  public typealias Index = Swift.Int
  public typealias Indices = Swift.Range<Swift.Int>
  public typealias Iterator = Swift.IndexingIterator<DifferenceKit.StagedChangeset<Collection>>
  public typealias SubSequence = Swift.Slice<DifferenceKit.StagedChangeset<Collection>>
}
extension DifferenceKit.StagedChangeset : Swift.Equatable where Collection : Swift.Equatable {
  @inlinable public static func == (lhs: DifferenceKit.StagedChangeset<Collection>, rhs: DifferenceKit.StagedChangeset<Collection>) -> Swift.Bool {
        return lhs.changesets == rhs.changesets
    }
}
extension DifferenceKit.StagedChangeset : Swift.ExpressibleByArrayLiteral {
  @inlinable public init(arrayLiteral elements: DifferenceKit.Changeset<Collection>...) {
        self.init(elements)
    }
  public typealias ArrayLiteralElement = DifferenceKit.Changeset<Collection>
}
extension DifferenceKit.StagedChangeset : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public protocol DifferentiableSection : DifferenceKit.ContentEquatable, DifferenceKit.ContentIdentifiable {
  associatedtype Collection : Swift.Collection where Self.Collection.Element : DifferenceKit.ContentEquatable, Self.Collection.Element : DifferenceKit.ContentIdentifiable
  var elements: Self.Collection { get }
  init<C>(source: Self, elements: C) where C : Swift.Collection, C.Element == Self.Collection.Element
}
public protocol ContentIdentifiable {
  associatedtype DifferenceIdentifier : Swift.Hashable
  var differenceIdentifier: Self.DifferenceIdentifier { get }
}
extension DifferenceKit.ContentIdentifiable where Self : Swift.Hashable {
  @inlinable public var differenceIdentifier: Self {
    get {
        return self
    }
  }
}
